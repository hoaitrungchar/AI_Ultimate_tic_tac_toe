from math import inf 
from collections import Counter
from state import UltimateTTT_Move
import copy
from timeit import default_timer as timer
import random

global turns 
turns = 1 

global evaluate_score
#evaluate_score=[ 8.42512233e+01 , 4.67254975e+00 , 4.99950059e+00 , 8.57582236e+01 , 4.60650510e+00 , 7.58269255e+00 , 7.08286619e+01 ,-1.52340929e+00 ,-1.67428716e+00 , 7.33663644e+01 ,-2.28204122e+00 ,-2.70478580e-01 , 7.37430281e+01 ,-3.43180451e+00 ,-3.21482719e+00 , 7.30853221e+01 ,-1.92850087e+00 ,-2.52674759e+00 , 7.36364338e+01 ,-2.71819884e+00 ,-5.08960944e-01 , 7.40528777e+01 ,-2.66713035e+00 ,-1.69967795e+00 , 9.00677072e+00 , 2.82562277e+00 , 1.13699885e+00 , 8.31847115e+00 ,-4.47454850e-01 ,-1.30360655e+00 , 5.98361683e+00 , 2.79973496e-01 ,-8.92149987e-01 , 7.07230994e+00 ,-2.55385049e-01 , 5.51204227e-01 , 8.37806715e+00 ,-3.47727358e-01 ,-6.52788718e-01 , 9.09362570e+00 , 1.15116979e+00 , 5.65307947e-01 , 7.16879907e+00 , 1.43274839e+00 , 5.14053615e-01 , 7.48316421e+00 , 2.89671205e-01 ,-1.88804381e-02 , 8.56703148e+00 ,-1.13149649e-01 , 1.07677977e+00 , 9.49318789e+00 , 2.42623839e-01 ,-4.19653574e-01 , 7.92006307e+00 ,-9.15297514e-02 ,-1.27834002e-01 , 6.22406609e+00 ,-2.74910921e+00 ,-8.66482195e-02 , 1.16331053e+01 , 4.71207097e-01 ,-3.60017695e-01 , 8.40298621e+00 , 2.86252172e-01 , 6.85608194e-01 , 6.67022720e+00 ,-3.92729686e-01 ,-1.50931330e+00 , 8.17344428e+00 , 3.99475895e-02 ,-9.36684398e-01 , 1.00597452e+01 , 4.47134156e-01 , 1.28883707e+00 , 8.55124148e+00 , 4.63441749e-02 , 1.58401195e+00 , 7.91544237e+00 ,-1.18188523e+00 ,-1.27017886e+00 , 4.98819309e+00 ,-3.70798991e-01 ,-1.27623825e+00 , 7.49572289e+00 , 2.39553947e-01 ,-4.61247261e-01 , 5.62478079e+00 ,-3.45767852e-01 ,-1.62379779e+00 , 8.97717848e+00 , 9.37199246e-01 , 9.70430213e-02 , 7.17893389e+00 , 3.74699422e-01 , 3.97793385e-01 , 1.10333149e+01 ,-4.20715426e-01 ,-1.55716192e-02 , 1.09297583e+01 ,-4.43677939e-01 , 1.12510507e-01 , 7.99025248e+00 ,-1.03980254e+00 , 1.31632407e-01 , 7.14403284e+00 ,-4.20023279e-01 ,-1.50889905e+00 , 9.51229807e+00 , 2.03881023e-01 , 6.94756836e-01 , 8.99554766e+00 , 8.14571397e-01 ,-9.91415173e-01 , 1.08015571e+01 , 1.84290865e-02 , 3.73307229e-01 , 9.51133333e+00 ,-7.10963726e-01 , 1.71501328e+00 , 4.13484257e+00 ,-6.13954687e-01 ,-3.11377698e+00 , 7.16467620e+00 , 2.75728660e-01 , 6.65174460e-01 , 7.31922622e+00 , 1.52001415e+00 , 5.09479765e-01 , 6.87600740e+00 , 1.17786450e+00 ,-4.35623232e-01 , 7.19445984e+00 , 4.38524238e-01 ,-7.64222070e-01 , 5.85389020e+00 ,-1.77348253e-01 , 2.98048124e-01 , 8.25998563e+00 , 7.72151111e-01 , 4.06655195e-01 , 6.13476703e+00 ,-7.64998180e-01 ,-1.38739322e-01 , 1.03095405e+01 ,-1.84274326e-01 ,-1.21188190e-01 , 9.42354513e+00 ,-3.48205041e-01 ,-1.00689564e+00 , 7.57358572e+00 , 4.48693195e-01 ,-4.14112434e-01 , 8.33061895e+00 ,-1.49338134e-01 ,-1.08320970e+00 , 8.10996039e+00 , 4.34135844e-01 ,-1.10073786e-01 , 7.59757315e+00 ,-2.76361675e-03 , 5.16057649e-01 , 8.54306333e+00 , 4.35760431e-01 , 2.19599442e-01 , 9.07419279e+00 ,-1.05119361e+00 , 1.10092903e-02 , 7.54731009e+00 , 1.19246041e+00 ,-1.23270518e+00 , 1.00061404e+01 , 9.62112906e-01 , 1.67756147e+00 , 8.77097508e+00 , 2.69590564e+00 ,-2.34254188e-01 , 9.67998641e+00 , 1.08252163e+00 , 1.72824988e+00 , 6.26422823e+00 ,-8.06501386e-01 ,-9.19503177e-01 , 4.65618732e+00 ,-1.01401458e+00 ,-6.96112057e-04 , 7.15460425e+00 ,-5.59656694e-01 , 3.70722012e-01 , 7.81615447e+00 , 3.39668733e-01 ,-1.33951902e+00 , 9.85259966e+00 , 1.14145921e+00 , 2.04477729e-01 , 1.14165910e+01 , 2.31090286e-01 ,-3.63848180e-01 , 8.78079841e+00 ,-3.41729394e-01 ,-5.40359553e-01 , 8.16682089e+00 ,-1.95044059e-01 ,-2.05994983e-01 , 7.85428754e+00 ,-1.44411152e-01 ,-8.50777341e-01 , 9.53634580e+00 ,-4.92744535e-01 , 6.83806684e-01 , 6.98574224e+00 ,-8.85527942e-01 , 2.22970232e-02 , 9.11585536e+00 ,-1.10848245e+00 ,-6.63119026e-01 , 9.70529696e+00 , 8.13026527e-01 ,-9.38565232e-03 , 8.22818019e+00 , 2.47747173e-02 , 7.20954458e-01 , 7.29966346e+00 , 1.08569883e+00 , 4.27130906e-01 , 6.18414311e+00 , 7.51769209e-01 ,-1.24459226e+00 , 7.04497398e+00 , 6.55470533e-01 , 1.30181434e-01 , 7.71306471e+00 ,-6.04158730e-01 , 2.91292691e-01 , 6.94130960e+00 ,-1.15964602e+00 ,-8.69023806e-01 , 8.43069841e+00 ,-1.76246498e-01 , 1.82793813e+00 ,-8.79599566e+01 ,-2.67760128e+00 ,-8.05095945e+00 ,-8.89296531e+01 ,-4.25132943e+00 ,-5.56704374e+00 ,-7.79061777e+01 , 2.77024255e+00 , 6.00597670e-01 ,-7.68631060e+01 , 1.89906859e+00 , 1.24380033e+00 ,-7.81068371e+01 , 1.06289611e+00 , 1.42383278e+00 ,-7.55057630e+01 , 1.23867718e+00 , 4.32371125e-01 ,-7.74823252e+01 , 1.27829058e+00 ,-3.03546341e-01 ,-7.61884066e+01 , 2.83917387e+00 , 1.40269521e+00 ,-9.63190437e+00 ,-2.58894818e-01 , 3.80771204e-01 ,-8.42154698e+00 , 9.34143134e-01 , 1.64731753e+00 ,-1.06693385e+01 ,-2.18476094e+00 , 4.14171470e-01 ,-8.73788878e+00 ,-2.00909055e-01 , 4.00651920e-02 ,-7.52709178e+00 ,-3.81013127e-01 , 8.11628143e-01 ,-9.44896138e+00 , 9.99923028e-01 , 1.45200099e+00 ,-6.89027762e+00 , 6.86213312e-01 , 1.46400432e+00 ,-9.55872378e+00 , 4.94482986e-01 ,-4.48056550e-01 ,-9.38917886e+00 , 1.15479418e+00 , 4.83865790e-01 ,-9.63922056e+00 ,-7.97651985e-01 , 3.06567885e-01 ,-6.13888671e+00 , 9.72017882e-01 , 8.98908549e-01 ,-1.05910372e+01 ,-1.14976640e+00 , 9.02015846e-01 ,-7.61951558e+00 , 1.77818266e+00 , 1.75017930e+00 ,-1.11160579e+01 ,-1.76804716e+00 , 5.08267336e-01 ,-9.83525017e+00 ,-8.97955984e-02 ,-7.86897177e-02 ,-8.72985318e+00 ,-2.84505023e-01 , 7.94263980e-02 ,-1.01737025e+01 , 5.18435536e-02 , 1.40523948e+00 ,-1.03386449e+01 , 1.60072207e+00 ,-1.39916803e+00 ,-7.45714040e+00 ,-2.83546892e-01 , 6.03818050e-01 ,-6.39796593e+00 ,-4.04686262e-01 ,-3.77065224e-01 ,-8.81717325e+00 ,-2.07653150e+00 , 7.41029193e-02 ,-7.22480421e+00 , 7.71242295e-04 , 2.65764824e-01 ,-7.30259206e+00 , 6.32715103e-01 , 2.02249859e+00 ,-7.48846959e+00 , 7.12610556e-01 , 5.74979864e-01 ,-9.62936861e+00 ,-9.40980938e-01 , 1.95641707e+00 ,-8.28894890e+00 , 1.19019521e-01 ,-7.67371953e-01 ,-7.83722857e+00 , 1.23021937e+00 , 1.81604603e+00 ,-9.33779029e+00 , 2.63823820e-01 , 6.31888684e-01 ,-8.21765929e+00 , 4.09312522e-01 ,-4.23597162e-01 ,-8.18311495e+00 , 1.61640761e+00 , 9.49396282e-02 ,-8.16108847e+00 , 9.95871980e-01 ,-2.36273595e+00 ,-8.64742816e+00 , 1.02945015e+00 , 1.15975325e+00 ,-7.60540123e+00 ,-2.74727845e+00 , 3.39557644e-01 ,-7.08114838e+00 ,-3.96998145e-01 , 1.06756620e+00 ,-5.50434419e+00 , 7.66191204e-02 , 6.59154335e-01 ,-7.77468615e+00 , 2.26822817e-01 ,-4.63997289e-01 ,-5.83005721e+00 , 1.30155620e+00 , 6.56340687e-02 ,-6.44512172e+00 ,-7.53542889e-01 ,-7.31389218e-01 ,-8.11547841e+00 , 1.35331299e+00 , 2.16299780e+00 ,-9.46614217e+00 ,-7.16065311e-01 ,-1.07671796e+00 ,-9.76826574e+00 ,-1.43221287e+00 ,-1.23360918e+00 ,-9.59199881e+00 ,-3.33710984e-01 ,-2.16219955e-02 ,-9.35507548e+00 , 3.68763059e-01 , 5.42412537e-01 ,-9.05767349e+00 ,-1.15872101e-01 ,-1.19055404e+00 ,-7.25693977e+00 , 1.86421450e-01 ,-5.68575781e-01 ,-7.29138058e+00 , 2.09793601e+00 , 2.87253193e+00 ,-9.54068663e+00 , 1.63013332e-01 , 1.86053640e+00 ,-9.07167422e+00 , 2.85531746e-01 , 1.77526113e+00 ,-8.33623253e+00 , 1.47935482e+00 ,-1.34363596e+00 ,-1.14718262e+01 ,-1.45354314e+00 ,-1.18387370e+00 ,-8.09126950e+00 ,-9.72051090e-01 , 1.20990378e+00 ,-7.29999039e+00 , 1.74494467e+00 , 4.00687250e-01 ,-8.72356458e+00 ,-6.57190235e-01 , 1.09427026e+00 ,-7.09756525e+00 , 4.77806353e-01 ,-8.23352377e-01 ,-6.96644333e+00 , 4.43236911e-01 , 2.19706801e+00 ,-6.30158276e+00 , 1.56568127e+00 , 9.62592394e-01 ,-1.08049481e+01 ,-1.93830987e+00 ,-1.31999757e+00 ,-7.42321180e+00 ,-3.74963422e-02 ,-1.47591802e-02 ,-7.60479963e+00 , 1.71088305e+00 , 1.07218729e+00 ,-8.06157636e+00 ,-7.60636105e-01 , 1.46132904e+00 ,-7.32671182e+00 , 6.51567462e-01 , 4.29094276e-01 ,-9.35732906e+00 ,-4.57596763e-01 ,-3.36818981e-02 ,-7.67157101e+00 ,-3.30842811e-01 ,-2.37823522e-01 ,-7.65095479e+00 , 7.06607663e-01 ,-4.21116879e-01 ,-9.20100122e+00 , 6.67230054e-01 ,-1.92195238e-01 ,-9.46760218e+00 ,-1.04336877e+00 ,-1.94956001e+00 ,-8.25232705e+00 , 2.09863836e-01 , 5.72987815e-01 ,-9.39718844e+00 ,-4.52854481e-01 , 1.17776545e+00 ,-8.92612472e+00 , 1.93569317e+00 ,-3.35597429e-01 ,-7.65560038e+00 , 8.74300638e-01 , 1.32912457e+00 ,-8.91475852e+00 ,-6.42038247e-01 , 1.24848999e+00 ,-9.29273101e+00 ,-6.11554701e-01 ,-4.28939748e-01 ]
evaluate_score=[8.83003925e+01,3.73581852e+00,3.44002358e+00,9.05282039e+01,4.62044395e+00,6.78181486e+00,7.21264366e+01,-2.25666430e+00,-2.47645247e+00,7.53744263e+01,-2.12080792e+00,-1.14222089e+00,7.59750525e+01,-2.95647918e+00,-3.28996129e+00,7.50079952e+01,-2.01965540e+00,-3.03969616e+00,7.72901041e+01,-1.34989096e+00,1.40199621e-01,7.46632171e+01,-3.29310927e+00,-2.84825681e+00,5.83789008e+00,2.08011811e+00,5.98166075e-01,5.59787165e+00,-1.00112089e+00,-1.49647119e+00,4.48303768e+00,1.03382506e+00,-2.62601385e-01,5.88132288e+00,5.19498328e-01,9.89183994e-01,6.86297122e+00,-4.74748079e-02,-5.85904934e-01,7.42060463e+00,1.61639025e+00,9.39300164e-01,6.46957214e+00,1.97245378e+00,1.01072442e+00,7.00164400e+00,1.18099775e+00,8.85934334e-01,6.93990343e+00,-5.12965903e-01,5.54744368e-01,8.27503153e+00,-2.61236639e-01,-8.76472714e-01,7.42633672e+00,2.85698430e-01,-2.83932050e-02,6.10133767e+00,-2.17626617e+00,-9.97992831e-02,1.07674723e+01,5.88865634e-01,-3.84248159e-02,9.06524633e+00,1.38665467e+00,9.38218190e-01,7.51148947e+00,5.36431994e-01,-6.70744246e-01,9.03443485e+00,1.24669080e+00,-3.03954149e-02,7.43299417e+00,2.52893225e-01,7.39822740e-01,5.21492056e+00,-6.98808570e-01,1.06376821e+00,6.37963887e+00,-6.28755668e-01,-9.57153398e-01,4.16727567e+00,6.44071747e-02,-9.97897186e-01,6.74435148e+00,8.63227869e-01,2.56183091e-01,4.57809916e+00,3.93027504e-01,-1.45820638e+00,7.18979751e+00,1.30559401e+00,2.90030911e-01,6.24790058e+00,1.03923273e+00,1.20897276e+00,9.72260242e+00,-7.93963748e-01,-2.71209998e-01,9.91468614e+00,-7.63156108e-01,-5.23553192e-01,9.54519996e+00,2.96019717e-01,4.79906829e-01,8.69433970e+00,6.55319364e-01,-8.20300760e-01,1.03798930e+01,8.64544225e-01,8.56207964e-01,9.37064603e+00,1.56011207e+00,-4.72355862e-01,1.10360684e+01,5.22009945e-01,6.39189331e-01,1.01775686e+01,1.84444079e-01,2.26586160e+00,-1.26988748e-01,-1.32591359e+00,-3.41956791e+00,2.89121140e+00,-1.15184828e-01,-6.92544434e-02,4.80645355e+00,2.18951528e+00,7.21462346e-01,4.73847691e+00,1.78741715e+00,1.15683171e-01,4.74968263e+00,8.33680096e-01,-2.11441104e-01,3.67495784e+00,7.30251022e-01,1.10172825e+00,5.66290811e+00,1.33574769e+00,7.83658689e-01,4.24812537e+00,-5.04432198e-02,4.40936644e-01,9.06377165e+00,-5.58791157e-01,-3.33483182e-01,7.52400127e+00,-5.39844608e-01,-1.47610529e+00,7.88915156e+00,9.68246243e-01,-1.72081650e-01,8.58822744e+00,8.21779844e-01,-4.49046426e-01,9.11811266e+00,1.41175212e+00,4.13481285e-01,8.03188451e+00,4.77592522e-01,7.89356343e-01,8.26138843e+00,1.05859480e+00,4.33786106e-01,9.27418464e+00,-4.45919005e-01,4.44033481e-01,5.51631885e+00,5.16674720e-01,-1.34437726e+00,8.11465757e+00,3.22579781e-01,1.09828629e+00,8.78705434e+00,3.53736083e+00,1.62308980e-01,9.81862366e+00,1.84113245e+00,1.98198099e+00,6.20984078e+00,1.64658174e-01,-5.06844813e-01,4.41560326e+00,-3.06659176e-01,3.77498855e-01,6.83317457e+00,1.44077093e-01,1.12282543e+00,7.60929809e+00,1.25021092e+00,-1.13043184e+00,8.40038888e+00,5.31106992e-01,-3.14754346e-01,1.01762733e+01,-3.91654027e-01,-1.13579643e+00,9.16135928e+00,5.96216968e-01,2.51073451e-01,7.82166881e+00,5.69869149e-01,3.22068045e-01,8.29635478e+00,7.88020226e-01,-3.66769239e-01,1.03604534e+01,1.35883961e-01,1.09793771e+00,7.47523272e+00,4.12136332e-03,5.83446123e-01,1.02584399e+01,-9.13388090e-02,-3.88246523e-01,6.93959900e+00,-2.16249862e-01,-7.34731072e-01,5.93372705e+00,-7.15285404e-01,3.59876463e-01,6.91888493e+00,1.44660389e+00,1.12854681e+00,5.70744846e+00,1.50617678e+00,-7.13603911e-01,6.12691492e+00,9.43993456e-01,4.68520504e-01,7.45678679e+00,-3.12957087e-01,4.49685727e-01,6.74873480e+00,-1.76199196e-01,-3.60086347e-01,7.81377129e+00,9.32762934e-01,2.32834184e+00,-9.55273577e+01,-2.70349937e+00,-6.83873514e+00,-9.78084610e+01,-4.43737102e+00,-4.09411820e+00,-8.17157446e+01,3.30498923e+00,1.59027731e+00,-8.29831632e+01,1.49442247e+00,1.43082831e+00,-8.35243613e+01,7.36130754e-01,1.93668297e+00,-8.06669526e+01,7.87854589e-01,5.88385992e-01,-8.45905739e+01,7.09641374e-01,6.05838789e-01,-8.12671978e+01,3.09598981e+00,2.46268298e+00,-7.97167022e+00,4.83703202e-01,2.85263063e-01,-6.94358511e+00,1.18328621e+00,1.72894557e+00,-1.03564942e+01,-2.53297015e+00,3.67699595e-01,-9.05235947e+00,-7.63307833e-01,-4.57701465e-01,-7.94116397e+00,-8.92443817e-01,2.67252494e-01,-9.59238058e+00,2.04856906e-01,8.71555055e-01,-7.83062239e+00,3.07683670e-01,1.43174493e+00,-9.64530339e+00,-1.76663323e-01,-6.62863655e-01,-8.03909880e+00,1.70395862e+00,1.22764828e+00,-8.48656700e+00,-3.53263371e-01,1.06514834e+00,-6.62849748e+00,5.63705110e-01,7.36129580e-01,-1.12278810e+01,-1.43544448e+00,5.78587633e-01,-7.84172640e+00,1.17900683e+00,1.41094502e+00,-1.28738933e+01,-2.57879489e+00,-1.64632485e-01,-1.10730022e+01,-1.34531677e+00,-6.94987387e-01,-9.81091835e+00,-1.25598904e+00,-5.07285515e-01,-7.71744714e+00,9.29695064e-01,1.83317755e+00,-7.56820396e+00,1.85109172e+00,-1.17099957e+00,-6.85287845e+00,-8.45640718e-01,1.85973962e-01,-6.34590013e+00,-9.66300865e-01,-5.63730327e-01,-8.05645576e+00,-2.46637548e+00,-5.29471412e-02,-6.33351806e+00,-4.25858598e-01,1.44075698e-02,-7.06867421e+00,3.08432989e-01,1.54336792e+00,-6.83832930e+00,4.05484027e-01,1.33802915e-01,-7.47258602e+00,-2.57682960e-01,2.64493109e+00,-6.70759944e+00,6.48001236e-01,-4.85853146e-01,-8.07260797e+00,3.83842609e-01,1.20955658e+00,-9.24206329e+00,-3.82916902e-01,3.57263041e-01,-8.38799006e+00,-7.52369201e-01,-1.41537116e+00,-7.86741592e+00,1.13203305e+00,-1.26778173e-01,-7.79974294e+00,7.59336770e-01,-2.09195644e+00,-7.97928312e+00,6.87121423e-01,9.61251250e-01,-2.62034923e+00,-1.62906258e+00,1.15652891e+00,-2.63337194e+00,1.94416964e-01,6.81109082e-01,-3.13094629e+00,-2.84091079e-01,5.11310592e-01,-4.61131371e+00,1.60209880e-01,-5.64286016e-01,-3.01288991e+00,9.05764739e-01,-1.13950657e-01,-4.66465357e+00,-1.29969704e+00,-1.23367674e+00,-6.74042412e+00,4.36620329e-01,1.51014720e+00,-7.24346613e+00,-1.22304095e+00,-1.29780419e+00,-7.30699623e+00,-7.70527707e-01,-6.13116709e-01,-7.33777791e+00,-2.54301871e-02,3.24618896e-01,-8.83597159e+00,-5.53085661e-01,-1.15567990e-01,-7.98888997e+00,-1.02016391e+00,-1.49760802e+00,-6.38778845e+00,-6.72674357e-01,-7.52622264e-01,-6.21667406e+00,1.47047258e+00,2.38892118e+00,-8.83205498e+00,-5.67569121e-01,1.51659624e+00,-8.61323177e+00,-4.20301633e-01,1.26577740e+00,-5.74804122e+00,2.36220510e+00,-7.84914546e-01,-8.33533562e+00,-5.09301358e-01,-7.22508274e-01,-7.50641916e+00,-1.48722953e+00,6.55996076e-01,-7.21336801e+00,1.00865831e+00,-9.25816423e-02,-7.90335495e+00,-1.12619487e+00,7.19246612e-01,-6.84618852e+00,-1.53005772e-01,-1.18773442e+00,-6.98205798e+00,-4.32868714e-01,1.53728966e+00,-6.07917677e+00,8.56044347e-01,7.14043552e-01,-9.87313662e+00,-1.55492426e+00,-1.17083163e+00,-6.54547525e+00,5.30737031e-01,4.28840297e-01,-8.39129619e+00,1.37668710e+00,1.01819666e+00,-8.96172015e+00,-8.87854647e-01,1.40565121e+00,-7.34484467e+00,3.52125125e-01,5.79850073e-01,-1.05484305e+01,-1.64469249e+00,-6.39974139e-01,-8.80682268e+00,-1.16339695e+00,-7.78619934e-01,-9.16831698e+00,-3.25911760e-01,-6.97324833e-01,-6.90100665e+00,8.71639376e-01,-9.57439074e-02,-7.12643194e+00,-1.56948234e-01,-1.25788605e+00,-8.05788380e+00,-2.13164491e-01,6.13022544e-01,-9.23207774e+00,-1.08928599e+00,4.95611830e-01,-8.43610222e+00,1.51916324e+00,-2.31579462e-01,-7.85160113e+00,3.38005461e-01,4.77864892e-01,-8.77028390e+00,-1.09742078e+00,6.34921755e-01,-8.37316100e+00,-1.30722332e+00,-8.49993358e-01]
#evaluate_score1=[-9.07788229e+01,-3.50279686e+00,-5.53716087e+00,-9.12373253e+01,-3.04730446e+00,-4.59933702e+00,-7.31235475e+01,2.58560410e+00,2.48310720e+00,-7.60296700e+01,2.46043583e+00,2.50201184e+00,-7.16405020e+01,3.96782246e+00,3.04048567e+00,-7.32175096e+01,2.19694736e+00,3.36610032e+00,-7.72904155e+01,2.02458049e+00,3.54057246e-01,-7.52475512e+01,2.33057740e+00,1.44254695e+00,-1.07810334e+01,-3.01418893e+00,-7.98120242e-01,-7.09667963e+00,-6.90059521e-01,5.39664223e-01,-7.67438767e+00,-1.74594187e+00,2.33936612e-01,-6.87848109e+00,-1.63144630e+00,-5.57661266e-01,-8.12478159e+00,-6.92056792e-01,3.55663718e-01,-9.53228120e+00,-1.54799527e-01,4.61228343e-01,-8.98201279e+00,-4.07135559e-01,-1.46157624e+00,-8.65640821e+00,4.62452944e-01,-5.29970894e-01,-8.60972877e+00,-8.62579211e-01,-2.16700629e-01,-5.98137083e+00,-1.81200433e-01,2.89311887e-01,-7.58441467e+00,5.58910961e-01,-7.16434566e-01,-8.50498199e+00,-1.69833611e-01,-3.88665514e-01,-7.09223276e+00,-3.82714937e-01,1.21862048e-01,-8.79917719e+00,6.40556274e-01,-1.49353700e-01,-8.18558995e+00,-1.63765458e+00,-1.39274683e-01,-9.85989856e+00,9.47360374e-03,-6.54291565e-01,-8.59025879e+00,5.95919671e-02,-1.23933163e+00,-7.89793480e+00,5.25760250e-01,1.66182748e+00,-8.29196011e+00,-8.66443517e-01,-5.67260010e-01,-8.38179898e+00,4.07601824e-01,3.56168543e-01,-7.45291255e+00,9.47347344e-02,-5.49451593e-01,-8.31235509e+00,-4.37521512e-01,6.15500245e-01,-7.31606253e+00,-2.04809315e+00,-5.72672506e-03,-9.88826346e+00,-9.36098892e-02,2.41034746e-01,-9.83323549e+00,-8.41174599e-01,7.48616231e-02,-7.38655180e+00,4.59814412e-01,1.87052578e-01,-9.69427767e+00,-2.01765557e+00,-2.29191537e+00,-9.63019890e+00,-1.21169708e+00,-1.98540854e-02,-1.06145810e+01,-2.34810394e-01,-4.02399781e-01,-7.90407374e+00,1.81549405e-01,-3.65663560e-01,-8.69181206e+00,-2.09526853e-02,-1.38469387e-01,-7.83812669e+00,-4.74128386e-01,6.46434499e-02,-3.69217696e+00,-7.12069119e-01,-6.84175703e-01,-1.87397425e+00,1.15187815e+00,1.35972864e+00,-4.99077363e+00,-1.44595712e+00,-4.87981615e-01,-4.34094220e+00,-4.55715456e-01,7.08306359e-01,-3.97294731e+00,-2.19207581e+00,-7.19340400e-01,-3.20097250e+00,-1.38097366e+00,1.83476133e+00,-4.99260928e+00,-1.45625522e+00,-1.95862172e-01,-5.31671827e+00,-1.42722158e+00,-1.13010985e+00,-1.03380604e+01,7.47839335e-01,-6.40591923e-01,-9.66270628e+00,1.00613038e+00,2.76211146e-01,-9.31259044e+00,-8.72556538e-01,-7.52996533e-01,-9.10038034e+00,-4.38379150e-01,4.31061916e-01,-1.05157622e+01,-6.08478900e-01,3.71049360e-01,-1.07111254e+01,-1.15320885e+00,-5.31815447e-01,-1.19093577e+01,-3.52744116e-01,2.26117564e-01,-1.03041435e+01,-4.48775697e-01,8.93119972e-01,-8.93777160e+00,-7.61363171e-01,1.12174414e+00,-8.44262429e+00,5.56052154e-01,9.07225814e-01,-7.50784196e+00,6.98801328e-01,6.80215856e-01,-8.51223107e+00,-1.30281545e-01,-5.87225411e-01,-5.85757197e+00,-4.55256986e-01,4.54540673e-01,-9.74434047e+00,-4.32781147e-01,6.42339427e-01,-8.61135515e+00,-1.11585738e+00,-1.50565157e+00,-1.10592321e+01,-2.43882462e+00,-9.20611820e-01,-7.91775848e+00,6.00898531e-01,1.13551142e+00,-6.29861536e+00,-1.31881845e-01,-4.04635136e-03,-9.41386791e+00,-3.06683817e+00,-2.63999066e+00,-9.51112921e+00,-2.11916178e+00,2.36189075e-01,-9.77168202e+00,-2.22295383e+00,-1.69311517e+00,-7.94244159e+00,-5.22417674e-01,2.89598043e-01,-6.45525137e+00,-8.31009406e-02,1.43465924e-03,-9.57746312e+00,-1.18461689e+00,-9.83152930e-01,-7.47676697e+00,1.03069699e-01,8.57639645e-01,-7.13273828e+00,-9.49230743e-01,7.78335692e-01,-8.38844173e+00,-2.88678072e+00,-2.35079787e+00,-9.00506683e+00,-9.28381538e-01,-2.25507697e+00,-7.16249485e+00,-1.99549682e+00,-1.89816819e+00,-7.55413340e+00,1.86575405e-01,-7.11050163e-02,-7.16809872e+00,-1.87799489e+00,1.22040851e+00,-7.76302773e+00,-1.31904990e+00,-2.90855672e-01,9.58980817e+01,3.06127895e+00,5.90260432e+00,9.63558684e+01,3.43225100e+00,7.16266044e+00,7.78413368e+01,-3.46962121e+00,-3.51727115e+00,8.40819356e+01,-8.28652237e-01,-9.64582224e-01,7.92623035e+01,-5.06313630e+00,-1.06191312e+00,7.98940623e+01,-3.74743308e+00,-2.46713681e+00,8.46428133e+01,-2.45496556e+00,-2.84480946e+00,7.82112073e+01,-2.89203140e+00,-1.11494973e+00,7.33013091e+00,-1.24170856e+00,-2.06774409e+00,8.71015365e+00,-9.46694598e-01,-1.37549237e+00,1.00409065e+01,-6.88511657e-01,7.47737345e-01,8.12847754e+00,5.14581930e-01,7.16705283e-01,9.13457724e+00,6.75796569e-01,-4.02763538e-01,9.38506287e+00,1.30637077e+00,1.20168303e+00,8.55073783e+00,1.11027266e+00,6.15087951e-01,9.06508541e+00,1.23903434e+00,1.05973773e+00,9.16651890e+00,-2.83462080e-01,3.74954471e-01,8.27957520e+00,-5.02307357e-02,-2.17785381e+00,8.43012819e+00,2.24719327e+00,-2.98538597e-01,1.25859729e+01,-1.02075170e+00,-1.87273641e+00,8.54119002e+00,1.65004526e+00,9.72076083e-01,1.05943504e+01,7.70429441e-01,6.50489182e-01,9.70877981e+00,1.37479869e+00,7.79666176e-01,1.07740977e+01,-1.04157900e+00,6.13755567e-02,9.24955942e+00,-1.27481998e+00,-2.13918745e+00,1.06088647e+01,-4.44187536e-01,-1.23920982e+00,9.35236259e+00,1.94947112e+00,6.19881001e-03,8.35330437e+00,9.72605876e-01,-6.08985301e-01,1.16656958e+01,2.15202520e+00,4.60194089e-01,1.03252338e+01,-3.52165856e-01,-5.62019331e-02,1.10980035e+01,9.90164520e-01,3.29667687e+00,9.61512985e+00,1.09362430e+00,-4.98869576e-01,6.87633542e+00,6.21480088e-01,3.31431308e-01,1.00170407e+01,1.23281858e+00,-1.42222323e-01,9.48695896e+00,9.78866778e-01,-1.26320203e+00,1.23205706e+01,1.42451671e+00,1.23667838e+00,9.62327381e+00,1.62754428e+00,-1.75728148e+00,8.79797447e+00,1.26782451e-01,5.63180091e-01,8.11702435e+00,-1.02128230e+00,-5.29141334e-01,9.62160731e+00,-2.47434805e-02,5.41282600e-01,1.75796112e+00,-5.11115193e-01,-2.26238612e+00,4.08465828e+00,3.37676453e-01,-1.22702818e+00,5.46785098e+00,1.83253814e+00,1.01906132e-02,7.47479054e+00,1.83385182e+00,1.18331340e+00,6.79278497e+00,8.11731300e-01,-1.65194447e-01,5.88971062e+00,1.23946730e+00,1.91890147e+00,6.60481414e+00,1.19913010e+00,8.30569234e-01,4.27107344e+00,1.96929657e+00,1.12507287e+00,9.27005894e+00,8.65334544e-01,-1.92390442e-01,9.23533643e+00,4.57300660e-01,-2.46188635e-01,1.02979469e+01,-6.02054345e-01,1.40907008e+00,1.00729990e+01,-9.02611478e-01,-3.44294293e-01,1.03114987e+01,-1.25036697e+00,-1.27864359e-01,8.86953007e+00,1.16258436e+00,1.35555837e+00,1.16963830e+01,1.72005790e+00,3.04818906e-01,1.06297051e+01,8.53980185e-01,5.24497571e-01,8.65047303e+00,-1.65338400e+00,-7.04079119e-01,1.04265587e+01,-2.22733635e-01,5.56577935e-02,9.69831196e+00,1.33255734e+00,5.50338909e-01,7.78020771e+00,-8.71405166e-01,-9.92667898e-01,1.06760969e+01,1.99559596e-01,-1.22899952e+00,1.11362091e+01,1.17765251e+00,5.07051848e-01,9.08747628e+00,5.30848850e-01,1.07521597e+00,1.00497426e+01,2.37580915e+00,1.30059028e+00,8.96572627e+00,-1.10113935e+00,-1.85966159e+00,7.62570904e+00,1.20281864e+00,4.37974988e-01,1.06967899e+01,1.06478539e+00,-1.35236474e+00,1.12509151e+01,1.32700359e+00,-4.50449904e-01,9.13798060e+00,2.24321812e+00,3.97365520e-01,8.87734733e+00,-1.18013036e+00,-2.16816689e-02,8.34337296e+00,-4.56731572e-01,1.81472287e+00,8.10547115e+00,4.30278478e-01,-7.49734359e-01,6.14223026e+00,1.16295306e+00,8.83475476e-01,7.62068108e+00,-9.27678797e-01,-9.08100751e-01,1.00897764e+01,1.93721675e+00,-3.63515518e-02,8.00402472e+00,4.25639162e-01,-4.52895227e-01,9.67368887e+00,-1.29143283e+00,-4.26224543e-01,1.06647419e+01,2.21380879e+00,2.10254509e+00,9.55399146e+00,7.25743096e-01,-4.22560290e-01,6.60518824e+00,2.61987779e-01,6.36076858e-01]
def act_move(c_state, move):
    local_board = c_state.blocks[move.index_local_board]
    local_board[move.x, move.y] = move.value
    
    c_state.player_to_move *= -1
    c_state.previous_move = move

    if c_state.global_cells[move.index_local_board] == 0: # not 'X' or 'O'
        if c_state.game_result(local_board):
            c_state.global_cells[move.index_local_board] = move.value
    return c_state
    
def select_move(cur_state, remain_time):
    if turns < 10:
        depth = 5
    elif turns < 12:
        depth = 8
    elif turns < 15:
        depth = 11
    else:
        depth = 15
     
    start_time = timer()  
    if cur_state.previous_move == None:
        return UltimateTTT_Move(4, 0, 0, 1)
    valid_moves = cur_state.get_valid_moves
    if len(valid_moves) != 0:
        best_move = minimax(cur_state, valid_moves, depth, start_time, remain_time)
        return best_move
    return None

def minimax(cur_state, valid_moves, depth, start_time, remain_time):
    global possible_goals
    possible_goals = [([0,0], [1,1], [2,2]), ([0,2], [1,1], [2,0]),
                      ([0,0], [1,0], [2,0]), ([0,1], [1,1], [2,1]), 
                      ([0,2], [1,2], [2,2]), ([0,0], [0,1], [0,2]),
                      ([1,0], [1,1], [1,2]), ([2,0], [2,1], [2,2])]

    # best_move = (-inf, None)
    best_list_move = [(-inf, None)]
    for move in valid_moves:
        state = copy.deepcopy(cur_state)
        state = act_move(state, move)
        value = min_turn(state, depth-1, -inf, inf, start_time, remain_time)
        #print("Value") 
        #print(value)
        if value > best_list_move[0][0]:
            #best_move = (value, move)
            best_list_move = [(value, move)]
        if value == best_list_move[0][0]:
            best_list_move.append((value, move))
    print (timer()-start_time)
    print(best_list_move)
    if (best_list_move[0][0] != None):
        print(random.choice(best_list_move))
        return (random.choice(best_list_move))[1]  
    else:
        return random.choice(valid_moves)    

def min_turn(cur_state, depth, alpha, beta, start_time, remain_time):
    valid_moves = cur_state.get_valid_moves
    if depth <= 0 or len(valid_moves) == 0 or (timer() - start_time > 9.8) or (remain_time - (timer() - start_time) < 1):
        state = copy.deepcopy(cur_state)
        state.player_to_move *= (-1)
        return evaluate(state)
    
    
    for move in valid_moves:
        state = copy.deepcopy(cur_state)
        state = act_move(state, move)
        value = max_turn(state, depth-1, alpha, beta, start_time, remain_time)

        if value < beta:
            beta = value
        if alpha >= beta:
            break

    return beta

def max_turn(cur_state, depth, alpha, beta, start_time, remain_time):
    valid_moves = cur_state.get_valid_moves
    if depth <= 0 or len(valid_moves) == 0 or (timer() - start_time > 9.8) or (remain_time - (timer() - start_time) < 1):
        state = copy.deepcopy(cur_state)
        return evaluate(state)
    
    
    for move in valid_moves:
        state = copy.deepcopy(cur_state)
        state = act_move(state, move)
        # state.player_to_move *= (-1)
        value = min_turn(state, depth-1, alpha, beta, start_time, remain_time)

        if alpha < value:
            alpha = value
        if alpha >= beta:
            break

    return alpha

def evaluate(cur_state): 
    score = 0
    global_cells = copy.deepcopy(cur_state.global_cells)
    score += evaluate_small_box(cur_state, global_cells.reshape(3,3),0)
    for block_idx in range(9):
        block = cur_state.blocks[block_idx]
        score += evaluate_small_box(cur_state, block,block_idx+1)


    return score

def evaluate_small_box(cur_state, block,pos):
    global possible_goals
    score = 0

    player = copy.deepcopy(cur_state.player_to_move)

    pos_score=0
    if(player==1):
        pos_score=0
    else:
        pos_score=240
    
    three = Counter([player, player, player])
    two   = Counter([player, player, 0])
    one   = Counter([player, 0, 0])

    player = player*(-1)
    three_opponent = Counter([player, player, player])
    two_opponent   = Counter([player, player, 0])
    one_opponent   = Counter([player, 0, 0])



    for idxs in range(0,8):
        (x, y, z) = possible_goals[idxs]
        current = Counter([block[x[0]][x[1]], block[y[0]][y[1]]
                        , block[z[0]][z[1]]])
        if(player==1):
            if current == three:
                score += (evaluate_score[idxs*3+pos_score+24*pos+0])
            elif current == two:
                score += (evaluate_score[idxs*3+pos_score+24*pos+1])
            elif current == one:
                score += (evaluate_score[idxs*3+pos_score+24*pos+2])

            if current == three_opponent:
                score += (evaluate_score[idxs*3+(240-pos_score)+24*pos+0])
            elif current == two_opponent:
                score += (evaluate_score[idxs*3+(240-pos_score)+24*pos+1])
            elif current == one_opponent:
                score += (evaluate_score[idxs*3+(240-pos_score)+24*pos+2])
        else:
            if current == three:
                score -= (evaluate_score[idxs*3+pos_score+24*pos+0])
            elif current == two:
                score -= (evaluate_score[idxs*3+pos_score+24*pos+1])
            elif current == one:
                score -= (evaluate_score[idxs*3+pos_score+24*pos+2])
                
            if current == three_opponent:
                score -= (evaluate_score[idxs*3+(240-pos_score)+24*pos+0])
            elif current == two_opponent:
                score -= (evaluate_score[idxs*3+(240-pos_score)+24*pos+1])
            elif current == one_opponent:
                score -= (evaluate_score[idxs*3+(240-pos_score)+24*pos+2])

    return score
